import random
import pygame
import copy

pygame.init()
clock = pygame.time.Clock()

font = pygame.font.SysFont("Segoeuisymbol", 20)
chinese_font = pygame.font.SysFont("SimHei", 20)  

restart_img = pygame.image.load("icons8-重启-501.png")  # 确保文件名正确
restart_img = pygame.transform.scale(restart_img, (18, 18))

info = pygame.display.Info()
screen_WIDTH = info.current_w
screen_HEGIHT = info.current_h

ratio = int(screen_WIDTH/screen_HEGIHT)
WIDTH = screen_WIDTH*0.6
HEIGHT = screen_HEGIHT*0.6/ratio
win = pygame.display.set_mode((WIDTH,HEIGHT), pygame.RESIZABLE | pygame.SCALED)
pygame.display.set_caption("Klondike Solitaire")

CARD_WIDTH = 70
CARD_HEIGHT = 100

GREEN = (0, 128, 0)  
WHITE = (255, 255, 255)  
BLACK = (0, 0, 0)
RED = (255,0,0)

COLOR_DICT = {"♠": BLACK, "♣": BLACK, "♥": RED, "♦": RED}

class Card:
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        self.face_up = False
        self.is_red = suit in ["♥", "♦"]
        
    def __repr__(self):
        return f"{self.suit}{self.rank}"
    
class KlondikeGame:
    def __init__(self):
        self.suit = ['♠', '♥', '♦', '♣']
        self.rank = list(range(1,14))
        self.deck = [Card(suit,rank) for suit in self.suit for rank in self.rank]
        self.waste_plie = [[]]
        self.foundation = [[] for _ in range(4)]
        self.history = []
        self.selected_card = None
        self.selected_offset = (0, 0)
        self.dragging_pos = None
        random.shuffle(self.deck)
        self.columns = [[] for _ in range(7)]
        for i in range(7):
            for j in range(i + 1):
                card = self.deck.pop()
                if i == j:  
                    card.face_up = True
                self.columns[i].append(card)
        self.draw_plie = self.deck[:]

def check_victory(game):
    total_cards = 52
    foundation_count = sum(len(f) for f in game.foundation)
    if foundation_count == total_cards:
        text = font.render("YOU WIN!", True, (255, 215, 0))  # 金色字体
        win.blit(text, (200, 300))

def reset_game(game):
    game.draw_plie = []
    game.deck = [Card(suit,rank) for suit in game.suit for rank in game.rank]
    game.waste_plie = [[]]
    game.foundation = [[] for _ in range(4)]
    game.history.clear()
    game.selected_card = None
    game.selected_offset = (0, 0)
    game.dragging_pos = None
    random.shuffle(game.deck)
    game.columns = [[] for _ in range(7)]
    for i in range(7):
        for j in range(i + 1):
            card = game.deck.pop()
            if i == j:  
                card.face_up = True
            game.columns[i].append(card)
    game.draw_plie = game.deck[:]

def draw_restart_button(win):
    pygame.draw.rect(win,(225,225,225),(220,600,84,34),border_radius=3)
    pygame.draw.rect(win,(0,128,0),(222,602,80,30),border_radius=3)
    text = chinese_font.render("重开",True,(255,255,255))
    win.blit(restart_img, (220,600))  
    win.blit(restart_img, (220,600))  
    win.blit(text,(257,606))

def licensing(game,mouse_pos):
        licensing_rect = pygame.Rect(50, 50, CARD_WIDTH, CARD_HEIGHT)
        if len(game.draw_plie) == 0:
            licensing1_rect = pygame.Rect(50, 50, CARD_WIDTH, CARD_HEIGHT)
            if licensing1_rect.collidepoint(mouse_pos):
                    game.draw_plie = copy.deepcopy(game.waste_plie[0])
                    game.waste_plie[0] = []
                    random.shuffle(game.draw_plie)
        elif licensing_rect.collidepoint(mouse_pos) and len(game.draw_plie) != 0: #elif与if独立进行
            for _ in range(3):
                if len(game.draw_plie) > 0:
                    card = game.draw_plie.pop()
                    card.face_up = True
                    game.waste_plie[0].append(card) 

def draw_undo_move(win):
    pygame.draw.rect(win,(225,225,225),(120,600,84,34),border_radius=3)
    pygame.draw.rect(win,(0,128,0),(122,602,80,30),border_radius=3)
    text1 = chinese_font.render("Klondike",True,(255,255,255))
    text = chinese_font.render("撤销",True,(255,255,255))
    win.blit(restart_img, (120, 600))  
    win.blit(text,(157,606))
    win.blit(text1,(7,606))
def get_current_state(game):
    return {
        "columns": [list(col) for col in game.columns],
        "foundation": [list(pile) for pile in game.foundation],
        "waste_plie": [list(pile) for pile in game.waste_plie],
    }
def undo_move(game):
    if not game.history:
        return
    current_state = get_current_state(game)
    # 如果历史记录最后一条和当前状态相同，则一直弹出，直到最后一条不相同
    while game.history and game.history[-1] == current_state:
        game.history.pop()
    if game.history:
        last_state = game.history.pop() #废牌区和回收区的牌在“选中时”就被移除了
        game.columns = [list(col) for col in last_state["columns"]]
        game.foundation = [list(col) for col in last_state["foundation"]]
        game.waste_plie = [list(col) for col in last_state["waste_plie"]]
def copy_history(game,mouse_pos):
    undo_move_rect = pygame.Rect(122,602,80,30)
    if undo_move_rect.collidepoint(mouse_pos):
        undo_move(game)
def save_game_state(game):
    new_state = {
        "columns": [list(col) for col in game.columns],
        "foundation": [list(col) for col in game.foundation],
        "waste_plie": [list(col) for col in game.waste_plie]
    }
    game.history.append(copy.deepcopy(new_state))
    while len(game.history) >= 2 and game.history[-1] == game.history[-2]:
        game.history.pop(-2)  # 删除倒数第二条
def handle_mouse_up(game,mouse_pos):
    
    restart_button_rect = pygame.Rect(222,602,80,30)
    if restart_button_rect.collidepoint(mouse_pos):
        reset_game(game) 
    if game.selected_card:
        save_game_state(game)
        print(f"{game.history}")
        col_idx,card_idx,moved_cards = game.selected_card
        if col_idx == "waste_plie": #废牌区交互
            waste_plie_idx = card_idx #1
            original_waste_plie = game.waste_plie[waste_plie_idx] #[♥A, ♥2, ♥3]
            moved_card = moved_cards[0] #也就是 ♥3
            for target_col_idx, target_column in enumerate(game.columns):
                x = 70 + target_col_idx * (CARD_WIDTH + 65)
                if target_column:
                    y = 200 + (len(target_column) - 1) * 25
                else:    
                    y = 200
                target_rect = pygame.Rect(x,y,CARD_WIDTH,CARD_HEIGHT)
                if target_rect.collidepoint(mouse_pos):
                    if can_place_cards(target_column, moved_cards):
                        target_column.extend(moved_cards)
                        original_waste_plie.pop() #原来的牌不再存在
                        break
                
            for idx, foundation in enumerate(game.foundation):
                x = 500 + idx * (CARD_WIDTH + 35)  # 回收区坐标
                y = 50
                foundation_rect = pygame.Rect(x, y, CARD_WIDTH, CARD_HEIGHT)
                if foundation_rect.collidepoint(mouse_pos):
                    if can_place_in_foundation(foundation, moved_cards[0]):  
                        foundation.append(moved_cards[0])  # 只允许放一张牌   game.foundation[idx] 是 四个回收堆之一         
                        original_waste_plie.pop() #原来的牌不再存在
                        break
           
           
        if isinstance(col_idx, int):
            original_column = game.columns[col_idx] #读取索引
            moved_cards = game.selected_card[2] #从card_idx:开始取出牌 
            
            for target_col_idx, target_column in enumerate(game.columns):
                x = 70 + target_col_idx * (CARD_WIDTH + 65)
                if target_column:
                    y = 200 + (len(target_column) - 1) * 25
                else:    
                    y = 200
                target_rect = pygame.Rect(x,y,CARD_WIDTH,CARD_HEIGHT)
                if target_rect.collidepoint(mouse_pos):
                    if can_place_cards(target_column, moved_cards):
                        target_column.extend(moved_cards)
                        del original_column[card_idx:]  # 主区域的“错误回归”是天然的 —— 因为失败的牌根本没有被删除，它们本来就还在那 
                        if original_column:
                            original_column[-1].face_up = True
                        break
            for idx, foundation in enumerate(game.foundation):
                x = 500 + idx * (CARD_WIDTH + 35)  # 回收区坐标
                y = 50
                foundation_rect = pygame.Rect(x, y, CARD_WIDTH, CARD_HEIGHT)

                if foundation_rect.collidepoint(mouse_pos):
                    if can_place_in_foundation(foundation, moved_cards[0]):  
                        foundation.append(moved_cards[0])  # 只允许放一张牌
                        del original_column[card_idx:]
                        if original_column:
                            original_column[-1].face_up = True
                        break
        
        if col_idx == "foundation": #game.selected_card = ("foundation", 1, [♥3])
            foundation_idx = card_idx #1
            original_foundation = game.foundation[foundation_idx] #[♥A, ♥2, ♥3]
            moved_card = moved_cards[0] #也就是 ♥3
            
            for idx, foundation in enumerate(game.foundation):
                    x = 500 + idx * (CARD_WIDTH + 35)  # 回收区坐标
                    y = 50
                    foundation_rect = pygame.Rect(x, y, CARD_WIDTH, CARD_HEIGHT)
                    if foundation_rect.collidepoint(mouse_pos):
                        if can_place_in_foundation(foundation, moved_cards[0]):  
                            foundation.append(moved_cards[0])
                            original_foundation.pop()
                            break
     
            for target_col_idx, target_column in enumerate(game.columns):
                    x = 70 + target_col_idx * (CARD_WIDTH + 65)
                    if target_column:
                        y = 200 + (len(target_column) - 1) * 25
                    else:
                        y = 200
                    target_rect = pygame.Rect(x,y,CARD_WIDTH,CARD_HEIGHT)
                    if target_rect.collidepoint(mouse_pos):
                        if can_place_cards(target_column, moved_cards):
                            target_column.append(moved_card)         
                            original_foundation.pop()
                            break
           

        game.selected_card = None
        game.dragging_pos = None
        

def handle_mouse_down(game,mouse_pos):
    
    for col_idx,column in enumerate(game.columns):
        x = 70 + col_idx * (CARD_WIDTH + 65)
        y = 200 + (len(column) - 1) * 25
        for card_idx in range(len(column) -1, -1 ,-1):
            card = column[card_idx]
            if card.face_up:
                if card_idx < len(column) - 1:
                    card.height = 40
                else:
                    card.height = CARD_HEIGHT
                card_rect = pygame.Rect(x,y,CARD_WIDTH,CARD_HEIGHT)
                if card_rect.collidepoint(mouse_pos):
                    game.selected_card = ("columns", card_idx, column[card_idx:]) #添加列索引，牌索引进入selected_card同步改变column[card_idx:] 
                    game.selected_offset = (mouse_pos[0] - x, mouse_pos[1] - y)                        #狗日的column[card_idx:]只是列表的一个视图（切片），并没有真正创建新的牌。
                    moved_cards = column[card_idx:]
                    game.selected_card = (col_idx, card_idx, moved_cards)
                    return
            y -= 25
    for idx, foundation in enumerate(game.foundation):
        if not foundation:
            continue
        x = 500 + idx * (CARD_WIDTH + 35)
        y = 50
        foundation_rect = pygame.Rect(x,y,CARD_WIDTH,CARD_HEIGHT)
        if foundation_rect.collidepoint(mouse_pos):
            game.selected_card = ("foundation", idx, foundation[card_idx:]) #他妈的创造了新列表  selected_card = [♦3]  (新创建的列表)                                                                                #         waste_pile = [♦A, ♦2, ♦3]  (仍然有♦3)
            game.selected_offset = (mouse_pos[0] - x,mouse_pos[1] - y) #                  waste_pile = [♦A, ♦2, ♦3]  (仍然有♦3)导致回归复制
            moved_cards = [foundation[-1]]
            game.selected_card = ("foundation", idx, moved_cards)
          
            return
        
    for idx, waste_plie in enumerate(game.waste_plie):
        if not waste_plie:
            continue
        x = 150
        y = 50
        waste_plie_rect = pygame.Rect(x,y,CARD_WIDTH,CARD_HEIGHT)
        if waste_plie_rect.collidepoint(mouse_pos):
            game.selected_card = ("waste_plie", idx, waste_plie[card_idx:]) #waste_plie[-1] 是单个 Card 对象，而 game.selected_card 期待一个列表。
            game.selected_offset = (mouse_pos[0] - x,mouse_pos[1] - y)
            moved_cards = [waste_plie[-1]]
            game.selected_card = ("waste_plie", idx, moved_cards)
            return
    
def handle_mouse_motion(game,mouse_pos):
    if game.selected_card:
        game.dragging_pos = (mouse_pos[0] - game.selected_offset[0],
                             mouse_pos[1] - game.selected_offset[1])
    
def can_place_cards(target_column,moved_cards):
        if not target_column:
            return moved_cards[0].rank == 13 #return表只有
        game.top_card = target_column[-1]
        game.new_card = moved_cards[0]
        return (game.top_card.is_red != game.new_card.is_red) and (game.top_card.rank == game.new_card.rank + 1)

def can_place_in_foundation(foundation, card):
    if not foundation:
        return card.rank == 1 
    top_card = foundation[-1]
    return (top_card.suit == card.suit) and (top_card.rank + 1 == card.rank)

def draw_card(win,card,x,y):
    pygame.draw.rect(win,(225,225,225),(x - 2,y - 2,CARD_WIDTH + 4,CARD_HEIGHT + 4),border_radius = 10)
    pygame.draw.rect(win,WHITE,(x ,y ,CARD_WIDTH ,CARD_HEIGHT ),border_radius = 10)
    text = font.render(card.__repr__(),True,COLOR_DICT[card.suit])
    win.blit(text,(x + 5,y + 5))

def draw_plie(win):
    win.fill(GREEN)
    draw_undo_move(win)
    draw_restart_button(win)
    check_victory(game)
    dragging_cards = game.selected_card[2] if game.selected_card else []

    if game.draw_plie:
        pygame.draw.rect(win,WHITE, (48,48,CARD_WIDTH + 4,CARD_HEIGHT + 4),border_radius = 10)
        pygame.draw.rect(win,WHITE, (50,50,CARD_WIDTH,CARD_HEIGHT),border_radius = 10)
        if len(game.draw_plie) > 0:
            text = font.render(f"{len(game.draw_plie)}",True,BLACK)
            win.blit(text,(70,80))
    for col_idx, column in enumerate(game.waste_plie):
        if column:
            for card in column: #牌索引
                if game.selected_card and card in dragging_cards:
                    continue # 正在拖动的牌跳过
                draw_card(win,card,150,50)
        if game.selected_card and game.dragging_pos:
            x, y = game.dragging_pos
            for moved_card in dragging_cards:
                draw_card(win, moved_card, x, y)
    for idx, plie in enumerate(game.foundation):
        x = 500 + idx * (CARD_WIDTH + 35)
        y = 50
        pygame.draw.rect(win, (225,225,225),(x,y,CARD_WIDTH ,CARD_HEIGHT ),border_radius = 10)
        if plie:
            for card in plie: #牌索引
                if game.selected_card and card in dragging_cards:
                    continue
                draw_card(win,card,x,y)
        if game.selected_card and game.dragging_pos:
            x, y = game.dragging_pos
            for moved_card in dragging_cards:
                draw_card(win, moved_card, x, y)
    for col_idx, column in enumerate(game.columns): #列索引
        x = 70 + col_idx * (CARD_WIDTH + 65)
        y = 200
        for card in column: #牌索引
            if game.selected_card and card in dragging_cards:
                continue
            if card.face_up:
                draw_card(win, card, x, y)
            else:
                pygame.draw.rect(win,WHITE,(x-2,y-2,CARD_WIDTH + 4,CARD_HEIGHT + 4),border_radius = 12) #原来的牌还存在
                pygame.draw.rect(win,BLACK,(x,y,CARD_WIDTH,CARD_HEIGHT), border_radius = 10)
            y += 25
        if game.selected_card and game.dragging_pos:
            x, y = game.dragging_pos
            for moved_card in dragging_cards:
                draw_card(win, moved_card, x, y)
                y += 25

    pygame.display.update()
game = KlondikeGame()

running = True
while running:
    draw_plie(win)
    pygame.display.update(win)
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONUP:
            copy_history(game, pygame.mouse.get_pos())
            handle_mouse_up(game, pygame.mouse.get_pos())

        elif event.type == pygame.MOUSEBUTTONDOWN:
            licensing(game, pygame.mouse.get_pos())
            handle_mouse_down(game,pygame.mouse.get_pos())
        elif event.type == pygame.MOUSEMOTION:
            handle_mouse_motion(game,pygame.mouse.get_pos())
        if event.type == pygame.QUIT:
            running = False
            
clock.tick(240)
pygame.quit()

        
